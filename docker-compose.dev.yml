version: '3.9'

services:
  postgres:
    image: timescale/timescaledb:latest-pg16
    environment:
      POSTGRES_DB: ecomind
      POSTGRES_USER: ecomind
      POSTGRES_PASSWORD: ecomind_dev_pass
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ecomind"]
      interval: 5s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5

  redpanda:
    image: docker.redpanda.com/redpandadata/redpanda:v23.3.3
    command:
      - redpanda
      - start
      - --smp
      - '1'
      - --reserve-memory
      - 0M
      - --overprovisioned
      - --node-id
      - '0'
      - --kafka-addr
      - PLAINTEXT://0.0.0.0:29092,OUTSIDE://0.0.0.0:9092
      - --advertise-kafka-addr
      - PLAINTEXT://redpanda:29092,OUTSIDE://localhost:9092
    ports:
      - "9092:9092"
      - "29092:29092"
    healthcheck:
      test: ["CMD-SHELL", "rpk cluster health | grep -E 'Healthy:.+true' || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5

  gateway:
    build:
      context: ./gateway
      dockerfile: Dockerfile
    environment:
      KAFKA_BROKERS: redpanda:29092
      REDIS_ADDR: redis:6379
      PORT: 8080
    ports:
      - "8080:8080"
    depends_on:
      redpanda:
        condition: service_healthy
      redis:
        condition: service_healthy

  api:
    build:
      context: ./api
      dockerfile: Dockerfile
    environment:
      DATABASE_URL: postgresql://ecomind:ecomind_dev_pass@postgres:5432/ecomind
      REDIS_URL: redis://redis:6379
      PORT: 8000
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./api:/app
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload

  worker:
    build:
      context: ./worker
      dockerfile: Dockerfile
    environment:
      DATABASE_URL: postgresql://ecomind:ecomind_dev_pass@postgres:5432/ecomind
      KAFKA_BROKERS: redpanda:29092
      REDIS_URL: redis://redis:6379
    depends_on:
      postgres:
        condition: service_healthy
      redpanda:
        condition: service_healthy
    volumes:
      - ./worker:/app

  ui:
    build:
      context: ./ui
      dockerfile: Dockerfile
    environment:
      NEXT_PUBLIC_API_URL: http://localhost:8000
    ports:
      - "3000:3000"
    volumes:
      - ./ui:/app
      - /app/node_modules
      - /app/.next
    command: npm run dev

volumes:
  postgres_data: